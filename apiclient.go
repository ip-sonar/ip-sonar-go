// Package ipsonar provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package ipsonar

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

const (
	ApiKeyScopes = "apiKey.Scopes"
)

// IPGeolocation defines model for IPGeolocation.
type IPGeolocation struct {
	// AccuracyRadius The geographic radius, measured in kilometers, within which the IP address is expected to be located.
	AccuracyRadius *int32  `json:"accuracy_radius,omitempty"`
	CityName       *string `json:"city_name,omitempty"`

	// ContinentCode AF - Africa
	// AN - Antarctica
	// AS - Asia
	// EU - Europe
	// NA - North America
	// OC - Oceania
	// SA - South America
	ContinentCode *string `json:"continent_code,omitempty"`
	ContinentName *string `json:"continent_name,omitempty"`

	// CountryCode ISO 3166-1
	CountryCode *string `json:"country_code,omitempty"`
	CountryName *string `json:"country_name,omitempty"`
	IP          *string `json:"ip,omitempty"`

	// IsInEu A binary indicator (1 or 0) showing whether the IP address's country belongs to the European Union.
	IsInEu     *bool    `json:"is_in_eu,omitempty"`
	Latitude   *float32 `json:"latitude,omitempty"`
	Longitude  *float32 `json:"longitude,omitempty"`
	PostalCode *string  `json:"postal_code,omitempty"`

	// Subdivision1Code ISO 3166-2 region code
	Subdivision1Code *string `json:"subdivision_1_code,omitempty"`
	Subdivision1Name *string `json:"subdivision_1_name,omitempty"`

	// Subdivision2Code ISO 3166-2 region code
	Subdivision2Code *string `json:"subdivision_2_code,omitempty"`
	Subdivision2Name *string `json:"subdivision_2_name,omitempty"`

	// Timezone IANA Timezone https://www.iana.org/time-zones
	Timezone *string `json:"timezone,omitempty"`
}

// Fields defines model for fields.
type Fields = string

// Locale defines model for locale.
type Locale = string

// BatchLookupIPResponse defines model for BatchLookupIPResponse.
type BatchLookupIPResponse struct {
	Data []IPGeolocation `json:"data"`
}

// ErrorMessageResponse defines model for ErrorMessageResponse.
type ErrorMessageResponse struct {
	Message string `json:"message"`
}

// LookupIPResponse defines model for LookupIPResponse.
type LookupIPResponse = IPGeolocation

// BatchLookupRequest defines model for BatchLookupRequest.
type BatchLookupRequest struct {
	// Data Array of IP Addresses
	Data []string `json:"data"`
}

// BatchLookupJSONBody defines parameters for BatchLookup.
type BatchLookupJSONBody struct {
	// Data Array of IP Addresses
	Data []string `json:"data"`
}

// BatchLookupParams defines parameters for BatchLookup.
type BatchLookupParams struct {
	Fields *Fields `form:"fields,omitempty" json:"fields,omitempty"`

	// LocaleCode Geolocation names language code. One of: de, en, es, fr, ja, pt-br, ru, zh-cn
	LocaleCode *Locale `form:"locale_code,omitempty" json:"locale_code,omitempty"`
}

// LookupMyParams defines parameters for LookupMy.
type LookupMyParams struct {
	Fields *Fields `form:"fields,omitempty" json:"fields,omitempty"`

	// LocaleCode Geolocation names language code. One of: de, en, es, fr, ja, pt-br, ru, zh-cn
	LocaleCode *Locale `form:"locale_code,omitempty" json:"locale_code,omitempty"`
}

// LookupParams defines parameters for Lookup.
type LookupParams struct {
	Fields *Fields `form:"fields,omitempty" json:"fields,omitempty"`

	// LocaleCode Geolocation names language code. One of: de, en, es, fr, ja, pt-br, ru, zh-cn
	LocaleCode *Locale `form:"locale_code,omitempty" json:"locale_code,omitempty"`
}

// BatchLookupJSONRequestBody defines body for BatchLookup for application/json ContentType.
type BatchLookupJSONRequestBody BatchLookupJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// BatchLookupWithBody request with any body
	BatchLookupWithBody(ctx context.Context, params *BatchLookupParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BatchLookup(ctx context.Context, params *BatchLookupParams, body BatchLookupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LookupMy request
	LookupMy(ctx context.Context, params *LookupMyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Lookup request
	Lookup(ctx context.Context, ip string, params *LookupParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) BatchLookupWithBody(ctx context.Context, params *BatchLookupParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBatchLookupRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BatchLookup(ctx context.Context, params *BatchLookupParams, body BatchLookupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBatchLookupRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LookupMy(ctx context.Context, params *LookupMyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLookupMyRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Lookup(ctx context.Context, ip string, params *LookupParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLookupRequest(c.Server, ip, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewBatchLookupRequest calls the generic BatchLookup builder with application/json body
func NewBatchLookupRequest(server string, params *BatchLookupParams, body BatchLookupJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBatchLookupRequestWithBody(server, params, "application/json", bodyReader)
}

// NewBatchLookupRequestWithBody generates requests for BatchLookup with any type of body
func NewBatchLookupRequestWithBody(server string, params *BatchLookupParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/batch")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LocaleCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "locale_code", runtime.ParamLocationQuery, *params.LocaleCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewLookupMyRequest generates requests for LookupMy
func NewLookupMyRequest(server string, params *LookupMyParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/myip")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LocaleCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "locale_code", runtime.ParamLocationQuery, *params.LocaleCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewLookupRequest generates requests for Lookup
func NewLookupRequest(server string, ip string, params *LookupParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "IP", runtime.ParamLocationPath, ip)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LocaleCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "locale_code", runtime.ParamLocationQuery, *params.LocaleCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// BatchLookupWithBodyWithResponse request with any body
	BatchLookupWithBodyWithResponse(ctx context.Context, params *BatchLookupParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BatchLookupResponse, error)

	BatchLookupWithResponse(ctx context.Context, params *BatchLookupParams, body BatchLookupJSONRequestBody, reqEditors ...RequestEditorFn) (*BatchLookupResponse, error)

	// LookupMyWithResponse request
	LookupMyWithResponse(ctx context.Context, params *LookupMyParams, reqEditors ...RequestEditorFn) (*LookupMyResponse, error)

	// LookupWithResponse request
	LookupWithResponse(ctx context.Context, ip string, params *LookupParams, reqEditors ...RequestEditorFn) (*LookupResponse, error)
}

type BatchLookupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BatchLookupIPResponse
	JSON401      *ErrorMessageResponse
	JSON429      *ErrorMessageResponse
	JSON500      *ErrorMessageResponse
}

// Status returns HTTPResponse.Status
func (r BatchLookupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BatchLookupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LookupMyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *ErrorMessageResponse
	JSON404      *ErrorMessageResponse
	JSON429      *ErrorMessageResponse
}

// Status returns HTTPResponse.Status
func (r LookupMyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LookupMyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LookupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LookupIPResponse
	JSON401      *ErrorMessageResponse
	JSON404      *ErrorMessageResponse
	JSON429      *ErrorMessageResponse
}

// Status returns HTTPResponse.Status
func (r LookupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LookupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// BatchLookupWithBodyWithResponse request with arbitrary body returning *BatchLookupResponse
func (c *ClientWithResponses) BatchLookupWithBodyWithResponse(ctx context.Context, params *BatchLookupParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BatchLookupResponse, error) {
	rsp, err := c.BatchLookupWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBatchLookupResponse(rsp)
}

func (c *ClientWithResponses) BatchLookupWithResponse(ctx context.Context, params *BatchLookupParams, body BatchLookupJSONRequestBody, reqEditors ...RequestEditorFn) (*BatchLookupResponse, error) {
	rsp, err := c.BatchLookup(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBatchLookupResponse(rsp)
}

// LookupMyWithResponse request returning *LookupMyResponse
func (c *ClientWithResponses) LookupMyWithResponse(ctx context.Context, params *LookupMyParams, reqEditors ...RequestEditorFn) (*LookupMyResponse, error) {
	rsp, err := c.LookupMy(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLookupMyResponse(rsp)
}

// LookupWithResponse request returning *LookupResponse
func (c *ClientWithResponses) LookupWithResponse(ctx context.Context, ip string, params *LookupParams, reqEditors ...RequestEditorFn) (*LookupResponse, error) {
	rsp, err := c.Lookup(ctx, ip, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLookupResponse(rsp)
}

// ParseBatchLookupResponse parses an HTTP response from a BatchLookupWithResponse call
func ParseBatchLookupResponse(rsp *http.Response) (*BatchLookupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BatchLookupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BatchLookupIPResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorMessageResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorMessageResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorMessageResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseLookupMyResponse parses an HTTP response from a LookupMyWithResponse call
func ParseLookupMyResponse(rsp *http.Response) (*LookupMyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LookupMyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorMessageResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorMessageResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorMessageResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseLookupResponse parses an HTTP response from a LookupWithResponse call
func ParseLookupResponse(rsp *http.Response) (*LookupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LookupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LookupIPResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorMessageResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorMessageResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorMessageResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}
